

    Instalación de EF
    dotnet add package Microsoft.EntityFrameworkCore --version 6.0.5

    Instalación para crear una base de datos en memoria
    dotnet add package Microsoft.EntityFrameworkCore.InMemory --version 6.0.5

    Instalación para conectarnos con el motor SQL Server
    dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 6.0.5

    Instalación para conectarnos con PostgreSQL
    dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL --version 6.0.4

   
 ***************************************************************  
    instalacion basica
    dotnet new web -f net6.0


Instale las dependencias de Entity Framework Core que mencionas:
    dotnet add package Microsoft.EntityFrameworkCore
    dotnet add package Microsoft.EntityFrameworkCore.InMemory
    dotnet add package Microsoft.EntityFrameworkCore.SqlServer
    dotnet new gitignore



    code .

    
Utilizando base de datos en memoria

El método UseInMemoryDatabase se utiliza para especificar que se debe usar una base de datos en memoria en lugar de una base de datos en disco. Esto puede ser útil para fines de prueba o para aplicaciones con una cantidad limitada de datos que no requieren una base de datos persistente.

builder.Services.AddDbContext<HomeworkContext>(p => p.UseInMemoryDatabase("TareasDB"));

Esta línea de código está agregando un contexto de base de datos al contenedor de servicios en .NET Core utilizando el método AddDbContext del objeto IServiceCollection llamado builder.Services. La clase HomeworkContext es la clase que representa el contexto de la base de datos y se está configurando para usar una base de datos en memoria con el nombre “TareasDB”.
Definimos nuestro endpoint

app.MapGet("/dbconexion", async ([FromServices] HomeworkContext dbContext) => 
{
    dbContext.Database.EnsureCreated();
    return Results.Ok("Base de datos en memoria: " + dbContext.Database.IsInMemory());

});

La ruta se está implementando como una función async que recibe una instancia de la clase HomeworkContext a través del atributo [FromServices].

La función realiza dos acciones:

    Llamada al método EnsureCreated en el objeto dbContext.Database. Este método asegura que la base de datos está creada y lista para su uso.
    Devolución de una respuesta HTTP 200 OK con un mensaje que indica si la base de datos es una base de datos en memoria o no. Esto se logra mediante la llamada a dbContext.Database.IsInMemory().


Para los que tienen problemas al ejecutar los certificados:

dotnet dev-certs https --clean
dotnet dev-certs https --trust

AZURE
Recursos
Instancias de los servicios disponibles: Máquinas virtuales, discos duros y bases de datos.

Grupos de recursos
Contenedor lógico donde se implementan y administran recursos de Azure. Un recurso puede pertenecer a un solo GR pero puede comunicarse con recursos de otro GR.

Suscripciones
Agrupación de cuentas de usuario y recursos creados por estas cuentas. Puede tener límites o cuotas definidas.

Grupos de administración
Administran el acceso, las directivas y cumplimiento de las suscripciones. Las suscripciones heredan las condiciones de su grupo.



